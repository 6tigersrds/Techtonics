#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     motorD,        tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C1_2,     motorE,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     motorF,        tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_2,     motorG,        tmotorTetrix, openLoop, reversed)
#pragma config(Servo,  srvo_S1_C3_1,    centerServo,          tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    sideServo,            tServoStandard)
#pragma config(Servo,  srvo_S1_C3_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
MotorD = Spinning Test motor
MotorE = Right side drive motors
MotorF = Left side drive motors
MotorG = Flywheel Motors
*/

#include "JoystickDriver.c"

int threshold = 15;
int outerServoDownAngle = 100;
int outerServoUpAngle = 250;
int innerServoDownAngle = 50;
int innerServoUpAngle = 175;

int robotSpeedL = 0;
int robotSpeedR = 0;
bool innerServoDown = false;
bool outerServoDown = false;
bool ljb_new = true;
bool rjb_new = true;

task main() {
	while(true) {
		getJoystickSettings(joystick);

    // I. Steering
		// Part 1: Speed
		if(joy1Btn(8) == 1 && joy1Btn(7) == 0) {
			robotSpeedL = 100;
			robotSpeedR = 100;
		}
		else if(joy1Btn(7) == 1 && joy1Btn(8) >= 0) {
			robotSpeedL = -100;
			robotSpeedR = -100;
		}
		else if(joy1Btn(8) == 1 && joy1Btn(7) == 1) {
			robotSpeedL = 50;
			robotSpeedR = 50;
		}
		else {
			robotSpeedL = 0;
			robotSpeedR = 0;
		}
		// Part 2: Steering
		if(abs(joy1_x1) >= threshold) {
			if(joy1_x1 > 0) { // When > 0, joystick is left
				robotSpeedL = robotSpeedL - (abs(joy1_x1) - 15) // -15 to threshold jump
			}
			else { // Joystick is right
				robotSpeedR = robotSpeedR - (abs(joy1_x1) - 15) // -15 to threshold jump
			}
		}
		// II. Servos
		if(joy1Btn(11)) { // Left joystick button (for outer latch)
			if(ljb_new) {
				outerServoDown = !outerServoDown;
			}
		}
		else {
			ljb_new = true;
		}
		
		if(joy1Btn(12)) { // Right joystick button (for inner latch)
			if(rjb_new) {
				innerServoDown = !innerServoDown;
			}
		}
		else {
			rjb_new = true;
		}
		// III. Assign values to motors and servos
		// Part 1. Motors
		motor[motorE] = robotSpeedR;
		motor[motorF] = robotSpeedL;
		
		// Part 2. Servos
 	  if(outerServoDown) {
 	  	servo[sideServo] = outerServoDownAngle; //Set servo value for lowered position
 		}
 		else {
 			servo[sideServo] = outerServoUpAngle; //Set servo value for up position
 		}
		
		if (innerServoDown) {
  	  servo[centerServo] = innerServoDownAngle;  //Set Servo value for Lowered position
 	 	}
 		else {
 	    servo[centerServo] = innerServoUpAngle;  //Set servo value for Up position
 	  }
	}
}
